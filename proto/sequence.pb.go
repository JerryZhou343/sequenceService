// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sequence.proto

package sequence

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//该模式用于签发有序增长ID，拼接产品线和业务ID 好能够在看到ID的时候区分其性质, 用于系统内部使用
//time + pid + bid + seq
type GetOrderIDReq struct {
	Pid                  int32    `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Bid                  int32    `protobuf:"varint,2,opt,name=bid,proto3" json:"bid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOrderIDReq) Reset()         { *m = GetOrderIDReq{} }
func (m *GetOrderIDReq) String() string { return proto.CompactTextString(m) }
func (*GetOrderIDReq) ProtoMessage()    {}
func (*GetOrderIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e97b888ecada2421, []int{0}
}

func (m *GetOrderIDReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetOrderIDReq.Unmarshal(m, b)
}
func (m *GetOrderIDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetOrderIDReq.Marshal(b, m, deterministic)
}
func (m *GetOrderIDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrderIDReq.Merge(m, src)
}
func (m *GetOrderIDReq) XXX_Size() int {
	return xxx_messageInfo_GetOrderIDReq.Size(m)
}
func (m *GetOrderIDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrderIDReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrderIDReq proto.InternalMessageInfo

func (m *GetOrderIDReq) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *GetOrderIDReq) GetBid() int32 {
	if m != nil {
		return m.Bid
	}
	return 0
}

type GetOrderIDRsp struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOrderIDRsp) Reset()         { *m = GetOrderIDRsp{} }
func (m *GetOrderIDRsp) String() string { return proto.CompactTextString(m) }
func (*GetOrderIDRsp) ProtoMessage()    {}
func (*GetOrderIDRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e97b888ecada2421, []int{1}
}

func (m *GetOrderIDRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetOrderIDRsp.Unmarshal(m, b)
}
func (m *GetOrderIDRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetOrderIDRsp.Marshal(b, m, deterministic)
}
func (m *GetOrderIDRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrderIDRsp.Merge(m, src)
}
func (m *GetOrderIDRsp) XXX_Size() int {
	return xxx_messageInfo_GetOrderIDRsp.Size(m)
}
func (m *GetOrderIDRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrderIDRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrderIDRsp proto.InternalMessageInfo

func (m *GetOrderIDRsp) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

//获得雪花ID
type GetSnowflakeIDReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSnowflakeIDReq) Reset()         { *m = GetSnowflakeIDReq{} }
func (m *GetSnowflakeIDReq) String() string { return proto.CompactTextString(m) }
func (*GetSnowflakeIDReq) ProtoMessage()    {}
func (*GetSnowflakeIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e97b888ecada2421, []int{2}
}

func (m *GetSnowflakeIDReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSnowflakeIDReq.Unmarshal(m, b)
}
func (m *GetSnowflakeIDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSnowflakeIDReq.Marshal(b, m, deterministic)
}
func (m *GetSnowflakeIDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSnowflakeIDReq.Merge(m, src)
}
func (m *GetSnowflakeIDReq) XXX_Size() int {
	return xxx_messageInfo_GetSnowflakeIDReq.Size(m)
}
func (m *GetSnowflakeIDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSnowflakeIDReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetSnowflakeIDReq proto.InternalMessageInfo

type GetSnowflakeIDRsp struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSnowflakeIDRsp) Reset()         { *m = GetSnowflakeIDRsp{} }
func (m *GetSnowflakeIDRsp) String() string { return proto.CompactTextString(m) }
func (*GetSnowflakeIDRsp) ProtoMessage()    {}
func (*GetSnowflakeIDRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e97b888ecada2421, []int{3}
}

func (m *GetSnowflakeIDRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSnowflakeIDRsp.Unmarshal(m, b)
}
func (m *GetSnowflakeIDRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSnowflakeIDRsp.Marshal(b, m, deterministic)
}
func (m *GetSnowflakeIDRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSnowflakeIDRsp.Merge(m, src)
}
func (m *GetSnowflakeIDRsp) XXX_Size() int {
	return xxx_messageInfo_GetSnowflakeIDRsp.Size(m)
}
func (m *GetSnowflakeIDRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSnowflakeIDRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetSnowflakeIDRsp proto.InternalMessageInfo

func (m *GetSnowflakeIDRsp) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

//无序订单号,这类ID 用于在对外系统使用,例如淘宝的支付订单号
//time + pid + bid + snowID
type GetDisorderIDReq struct {
	Pid                  int32    `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Bid                  int32    `protobuf:"varint,2,opt,name=bid,proto3" json:"bid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDisorderIDReq) Reset()         { *m = GetDisorderIDReq{} }
func (m *GetDisorderIDReq) String() string { return proto.CompactTextString(m) }
func (*GetDisorderIDReq) ProtoMessage()    {}
func (*GetDisorderIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e97b888ecada2421, []int{4}
}

func (m *GetDisorderIDReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDisorderIDReq.Unmarshal(m, b)
}
func (m *GetDisorderIDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDisorderIDReq.Marshal(b, m, deterministic)
}
func (m *GetDisorderIDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDisorderIDReq.Merge(m, src)
}
func (m *GetDisorderIDReq) XXX_Size() int {
	return xxx_messageInfo_GetDisorderIDReq.Size(m)
}
func (m *GetDisorderIDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDisorderIDReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetDisorderIDReq proto.InternalMessageInfo

func (m *GetDisorderIDReq) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *GetDisorderIDReq) GetBid() int32 {
	if m != nil {
		return m.Bid
	}
	return 0
}

type GetDisorderIDRsp struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDisorderIDRsp) Reset()         { *m = GetDisorderIDRsp{} }
func (m *GetDisorderIDRsp) String() string { return proto.CompactTextString(m) }
func (*GetDisorderIDRsp) ProtoMessage()    {}
func (*GetDisorderIDRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e97b888ecada2421, []int{5}
}

func (m *GetDisorderIDRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDisorderIDRsp.Unmarshal(m, b)
}
func (m *GetDisorderIDRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDisorderIDRsp.Marshal(b, m, deterministic)
}
func (m *GetDisorderIDRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDisorderIDRsp.Merge(m, src)
}
func (m *GetDisorderIDRsp) XXX_Size() int {
	return xxx_messageInfo_GetDisorderIDRsp.Size(m)
}
func (m *GetDisorderIDRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDisorderIDRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetDisorderIDRsp proto.InternalMessageInfo

func (m *GetDisorderIDRsp) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetSegmentIDReq struct {
	Pid                  int32    `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Bid                  int32    `protobuf:"varint,2,opt,name=bid,proto3" json:"bid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSegmentIDReq) Reset()         { *m = GetSegmentIDReq{} }
func (m *GetSegmentIDReq) String() string { return proto.CompactTextString(m) }
func (*GetSegmentIDReq) ProtoMessage()    {}
func (*GetSegmentIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e97b888ecada2421, []int{6}
}

func (m *GetSegmentIDReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSegmentIDReq.Unmarshal(m, b)
}
func (m *GetSegmentIDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSegmentIDReq.Marshal(b, m, deterministic)
}
func (m *GetSegmentIDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSegmentIDReq.Merge(m, src)
}
func (m *GetSegmentIDReq) XXX_Size() int {
	return xxx_messageInfo_GetSegmentIDReq.Size(m)
}
func (m *GetSegmentIDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSegmentIDReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetSegmentIDReq proto.InternalMessageInfo

func (m *GetSegmentIDReq) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *GetSegmentIDReq) GetBid() int32 {
	if m != nil {
		return m.Bid
	}
	return 0
}

type GetSegmentIDRsp struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSegmentIDRsp) Reset()         { *m = GetSegmentIDRsp{} }
func (m *GetSegmentIDRsp) String() string { return proto.CompactTextString(m) }
func (*GetSegmentIDRsp) ProtoMessage()    {}
func (*GetSegmentIDRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e97b888ecada2421, []int{7}
}

func (m *GetSegmentIDRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSegmentIDRsp.Unmarshal(m, b)
}
func (m *GetSegmentIDRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSegmentIDRsp.Marshal(b, m, deterministic)
}
func (m *GetSegmentIDRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSegmentIDRsp.Merge(m, src)
}
func (m *GetSegmentIDRsp) XXX_Size() int {
	return xxx_messageInfo_GetSegmentIDRsp.Size(m)
}
func (m *GetSegmentIDRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSegmentIDRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetSegmentIDRsp proto.InternalMessageInfo

func (m *GetSegmentIDRsp) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*GetOrderIDReq)(nil), "sequence.GetOrderIDReq")
	proto.RegisterType((*GetOrderIDRsp)(nil), "sequence.GetOrderIDRsp")
	proto.RegisterType((*GetSnowflakeIDReq)(nil), "sequence.GetSnowflakeIDReq")
	proto.RegisterType((*GetSnowflakeIDRsp)(nil), "sequence.GetSnowflakeIDRsp")
	proto.RegisterType((*GetDisorderIDReq)(nil), "sequence.GetDisorderIDReq")
	proto.RegisterType((*GetDisorderIDRsp)(nil), "sequence.GetDisorderIDRsp")
	proto.RegisterType((*GetSegmentIDReq)(nil), "sequence.GetSegmentIDReq")
	proto.RegisterType((*GetSegmentIDRsp)(nil), "sequence.GetSegmentIDRsp")
}

func init() { proto.RegisterFile("sequence.proto", fileDescriptor_e97b888ecada2421) }

var fileDescriptor_e97b888ecada2421 = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x4e, 0x2d, 0x2c,
	0x4d, 0xcd, 0x4b, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0x8c,
	0xb9, 0x78, 0xdd, 0x53, 0x4b, 0xfc, 0x8b, 0x52, 0x52, 0x8b, 0x3c, 0x5d, 0x82, 0x52, 0x0b, 0x85,
	0x04, 0xb8, 0x98, 0x0b, 0x32, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x58, 0x83, 0x40, 0x4c, 0x90,
	0x48, 0x52, 0x66, 0x8a, 0x04, 0x13, 0x44, 0x24, 0x29, 0x33, 0x45, 0x49, 0x1e, 0x45, 0x53, 0x71,
	0x81, 0x10, 0x1f, 0x17, 0x13, 0x54, 0x0f, 0x67, 0x10, 0x53, 0x66, 0x8a, 0x92, 0x30, 0x97, 0xa0,
	0x7b, 0x6a, 0x49, 0x70, 0x5e, 0x7e, 0x79, 0x5a, 0x4e, 0x62, 0x76, 0x2a, 0xd8, 0x64, 0x25, 0x65,
	0x0c, 0x41, 0x14, 0x9d, 0xcc, 0x60, 0x9d, 0x66, 0x5c, 0x02, 0xee, 0xa9, 0x25, 0x2e, 0x99, 0xc5,
	0xf9, 0xa4, 0x39, 0x49, 0x09, 0x5d, 0x1f, 0x16, 0x57, 0x99, 0x72, 0xf1, 0x83, 0x1c, 0x90, 0x9a,
	0x9e, 0x9b, 0x9a, 0x57, 0x42, 0xbc, 0xd1, 0x8a, 0x68, 0xda, 0x30, 0x5d, 0x6d, 0xb4, 0x96, 0x89,
	0x8b, 0x23, 0x18, 0x1a, 0xa4, 0x42, 0x0e, 0x5c, 0x5c, 0x88, 0xd0, 0x11, 0x12, 0xd7, 0x83, 0x87,
	0x3d, 0x4a, 0x40, 0x4b, 0x61, 0x97, 0x28, 0x2e, 0x50, 0x62, 0x10, 0xf2, 0xe1, 0xe2, 0x43, 0x0d,
	0x29, 0x21, 0x69, 0x14, 0xc5, 0xa8, 0x01, 0x2b, 0x85, 0x5b, 0x12, 0x6c, 0x9a, 0x27, 0x38, 0xb6,
	0x10, 0x41, 0x23, 0x24, 0x85, 0xa2, 0x1e, 0x25, 0xac, 0xa5, 0x70, 0xca, 0x81, 0x8d, 0x72, 0xe3,
	0xe2, 0x41, 0x0e, 0x0a, 0x21, 0x49, 0x54, 0x9b, 0x91, 0x42, 0x56, 0x0a, 0x97, 0x14, 0xc8, 0x9c,
	0x24, 0x36, 0x70, 0x32, 0x34, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x88, 0xc9, 0x7e, 0x25, 0x98,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SequenceClient is the client API for Sequence service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SequenceClient interface {
	GetOrderID(ctx context.Context, in *GetOrderIDReq, opts ...grpc.CallOption) (*GetOrderIDRsp, error)
	GetSnowflakeID(ctx context.Context, in *GetSnowflakeIDReq, opts ...grpc.CallOption) (*GetSnowflakeIDRsp, error)
	GetDisorderID(ctx context.Context, in *GetDisorderIDReq, opts ...grpc.CallOption) (*GetDisorderIDRsp, error)
	GetSegmentID(ctx context.Context, in *GetSegmentIDReq, opts ...grpc.CallOption) (*GetSegmentIDRsp, error)
}

type sequenceClient struct {
	cc *grpc.ClientConn
}

func NewSequenceClient(cc *grpc.ClientConn) SequenceClient {
	return &sequenceClient{cc}
}

func (c *sequenceClient) GetOrderID(ctx context.Context, in *GetOrderIDReq, opts ...grpc.CallOption) (*GetOrderIDRsp, error) {
	out := new(GetOrderIDRsp)
	err := c.cc.Invoke(ctx, "/sequence.Sequence/GetOrderID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceClient) GetSnowflakeID(ctx context.Context, in *GetSnowflakeIDReq, opts ...grpc.CallOption) (*GetSnowflakeIDRsp, error) {
	out := new(GetSnowflakeIDRsp)
	err := c.cc.Invoke(ctx, "/sequence.Sequence/GetSnowflakeID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceClient) GetDisorderID(ctx context.Context, in *GetDisorderIDReq, opts ...grpc.CallOption) (*GetDisorderIDRsp, error) {
	out := new(GetDisorderIDRsp)
	err := c.cc.Invoke(ctx, "/sequence.Sequence/GetDisorderID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceClient) GetSegmentID(ctx context.Context, in *GetSegmentIDReq, opts ...grpc.CallOption) (*GetSegmentIDRsp, error) {
	out := new(GetSegmentIDRsp)
	err := c.cc.Invoke(ctx, "/sequence.Sequence/GetSegmentID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SequenceServer is the server API for Sequence service.
type SequenceServer interface {
	GetOrderID(context.Context, *GetOrderIDReq) (*GetOrderIDRsp, error)
	GetSnowflakeID(context.Context, *GetSnowflakeIDReq) (*GetSnowflakeIDRsp, error)
	GetDisorderID(context.Context, *GetDisorderIDReq) (*GetDisorderIDRsp, error)
	GetSegmentID(context.Context, *GetSegmentIDReq) (*GetSegmentIDRsp, error)
}

// UnimplementedSequenceServer can be embedded to have forward compatible implementations.
type UnimplementedSequenceServer struct {
}

func (*UnimplementedSequenceServer) GetOrderID(ctx context.Context, req *GetOrderIDReq) (*GetOrderIDRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderID not implemented")
}
func (*UnimplementedSequenceServer) GetSnowflakeID(ctx context.Context, req *GetSnowflakeIDReq) (*GetSnowflakeIDRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSnowflakeID not implemented")
}
func (*UnimplementedSequenceServer) GetDisorderID(ctx context.Context, req *GetDisorderIDReq) (*GetDisorderIDRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDisorderID not implemented")
}
func (*UnimplementedSequenceServer) GetSegmentID(ctx context.Context, req *GetSegmentIDReq) (*GetSegmentIDRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegmentID not implemented")
}

func RegisterSequenceServer(s *grpc.Server, srv SequenceServer) {
	s.RegisterService(&_Sequence_serviceDesc, srv)
}

func _Sequence_GetOrderID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceServer).GetOrderID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sequence.Sequence/GetOrderID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceServer).GetOrderID(ctx, req.(*GetOrderIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sequence_GetSnowflakeID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSnowflakeIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceServer).GetSnowflakeID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sequence.Sequence/GetSnowflakeID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceServer).GetSnowflakeID(ctx, req.(*GetSnowflakeIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sequence_GetDisorderID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDisorderIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceServer).GetDisorderID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sequence.Sequence/GetDisorderID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceServer).GetDisorderID(ctx, req.(*GetDisorderIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sequence_GetSegmentID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSegmentIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceServer).GetSegmentID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sequence.Sequence/GetSegmentID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceServer).GetSegmentID(ctx, req.(*GetSegmentIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sequence_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sequence.Sequence",
	HandlerType: (*SequenceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrderID",
			Handler:    _Sequence_GetOrderID_Handler,
		},
		{
			MethodName: "GetSnowflakeID",
			Handler:    _Sequence_GetSnowflakeID_Handler,
		},
		{
			MethodName: "GetDisorderID",
			Handler:    _Sequence_GetDisorderID_Handler,
		},
		{
			MethodName: "GetSegmentID",
			Handler:    _Sequence_GetSegmentID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sequence.proto",
}
